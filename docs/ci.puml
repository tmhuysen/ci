@startuml


namespace numopt {


namespace eigenproblem {


        abstract class BaseEigenproblemSolver {
            == protected constructors ==
                # explicit **BaseEigenproblemSolver**(size_t dim)
            == destructor ==
                {abstract} virtual ~ **BaseEigenproblemSolver**() = default
            __ public pure {abstract} virtual methods __
                + {abstract} virtual void **solve**() = 0
            __ public methods __
                + **get_eigenvalue**() const
                + **get_eigenvector**() const
        }

        BaseMatrixSolver --|> BaseEigenproblemSolver
        abstract class BaseMatrixSolver {
            == destructor ==
                **~BaseMatrixSolver**() override = default
            __ public pure virtual methods __
                + {abstract} virtual void **addToMatrix**(double value, size_t index1, size_t index2) = 0
        }


        DenseSolver --|> BaseMatrixSolver
        class DenseSolver {
            == constructors ==
                explicit **DenseSolver**(size_t dim)
            == destructor ==
                 **~DenseSolver**() override = default
            __ public methods __
                + void **solve**() override
                + void **addToMatrix**(double value, size_t index1, size_t index2) override
        }


        SparseSolver --|> BaseMatrixSolver
        class SparseSolver {
            == constructors ==
                explicit **SparseSolver**(size_t dim)
            == destructor ==
                 **~SparseSolver**() override = default
            __ public methods __
                + {abstract} virtual void **solve**() override
                + void **addToMatrix**(double value, size_t index1, size_t index2) override
        }


        DavidsonSolver --|> BaseEigenproblemSolver
        class DavidsonSolver {
            == constructors ==
                **DavidsonSolver**(const numopt::VectorFunction& matrixVectorProduct, const Eigen::VectorXd& t_0, const Eigen::VectorXd& diagonal,
                                   double residue_tolerance = 1.0e-08, double correction_threshold = 1.0e-03, size_t maximum_subspace_dimension = 15)
            == destructor ==
                 **~DavidsonSolver**() override = default
            __ public methods __
                + void **solve**() override
        }


    }


}



namespace bmqc {

    class AddressingScheme {
        == constructors ==
            **AddressingScheme**(size_t K, size_t N)
        __ public methods __
            + const bmqc::Matrixi **get_vertex_weights**() const
    }

    class SpinString<T> {
        == constructors ==
            **SpinString**<T>(T representation, size_t K)
            **SpinString**<T>(size_t address, const bmqc::AddressingScheme& addressing_scheme)
        __ public methods __
            + T **get_representation**() const
            + size_t **get_K**() const
            + size_t **get_N**() const

            + size_t **address**(const bmqc::AddressingScheme& addressing_scheme) const
            + void **nextPermutation**()
            + bool **annihilate**(size_t p)
            + bool **annihilate**(size_t p, int& sign)
            + bool **create**(size_t p)
            + bool **create**(size_t p, int& sign)
    }


}



namespace libwint {

    class SOBasis {
        __ public methods __
            + const size_t **get_K**() const
            + double **get_h_SO**(size_t i, size_t j) const
            + double **get_g_SO**(size_t i, size_t j, size_t k, size_t l) const
    }


}



namespace ci {


    abstract class BaseCI {
        __ protected members __
            # libwint::SOBasis& so_basis
            # numopt::eigenproblem::BaseEigenproblemSolver* eigensolver_ptr = nullptr

            # const size_t dim

            # Eigen::VectorXd diagonal

            # bool are_computed_one_rdms = false
            # bool are_computed_two_rdms = false

            # Eigen::MatrixXd one_rdm_aa
            # Eigen::MatrixXd one_rdm_bb
            # Eigen::Tensor<double, 4> two_rdm_aaaa
            # Eigen::Tensor<double, 4> two_rdm_aabb
            # Eigen::Tensor<double, 4> two_rdm_bbaa
            # Eigen::Tensor<double, 4> two_rdm_bbbb
        == protected constructors ==
            # explicit **BaseCI**(libwint::SOBasis& so_basis)
        __ protected pure virtual methods __
            # {abstract} virtual void **constructHamiltonian**(ci::solver::BaseMatrixSolver* matrix_solver) = 0
            # {abstract} virtual Eigen::VectorXd **matrixVectorProduct**() = 0
            # {abstract} virtual Eigen::VectorXd **calculateDiagonal**() = 0
        __ protected methods __
            # void **solveMatrixEigenvalueProblem**(ci::solver::BaseMatrixSolver* matrix_solver)
        == destructor ==
            {abstract} virtual **~BaseCI**()
        __ public methods __
            + size_t **get_dim**() const
            + double **get_eigenvalue**() const
            + Eigen::VectorXd **get_eigenvector**() const
            + Eigen::MatrixXd get_one_rdm_aa() const
            + Eigen::MatrixXd get_one_rdm_bb() const
            + Eigen::Tensor<double, 4> get_two_rdm_aaaa() const
            + Eigen::Tensor<double, 4> get_two_rdm_aabb() const
            + Eigen::Tensor<double, 4> get_two_rdm_bbaa() const
            + Eigen::Tensor<double, 4> get_two_rdm_bbbb() const

            + void **solve**(ci::solver::SolverType solver_type)
            + {abstract} virtual void compute1RDM()=0
            + {abstract} virtual void compute2RDM()=0
    }
    ci.BaseCI *--> numopt.eigenproblem.BaseEigenproblemSolver
    ci.BaseCI *--> bmqc.SpinString
    ci.BaseCI o--> bmqc.AddressingScheme
    ci.BaseCI o--> libwint.SOBasis


    ci.DOCI --|> ci.BaseCI
    class DOCI {
        __ private members __
            - const size_t K
            - const size_t N_P
            - const bmqc::AddressingScheme addressing_scheme
        __ private methods __
            - void **constructHamiltonian**(ci::solver::MatrixSolver* matrix_solver) override
            - Eigen::VectorXd **matrixVectorProduct**() override
            - Eigen::VectorXd **calculateDiagonal**() override
        == constructors ==
            **DOCI**(const libwint::SOBasis& so_basis, size_t N)
        == destructor ==
            **~DOCI**()
        __ public methods __
            + {static} **calculateDimension**(size_t K, size_t N_P)
            + void **calculate1RDMs**() override
            + void **calculate2RDMs**() override
    }

    ci.FCI --|> ci.BaseCI
    class FCI {
        __ private members __
            - const size_t dim_alpha
            - const size_t dim_beta

            - const size_t K

            - const size_t N_alpha
            - const size_t N_beta

            - const bmqc::AddressingScheme addressing_scheme_alpha
            - const bmqc::AddressingScheme addressing_scheme_beta

            - std::vector<std::vector<OneElectronCoupling>> alpha_one_electron_couplings
            - std::vector<std::vector<OneElectronCoupling>> beta_one_electron_couplings
        __ private methods __
            - void **constructHamiltonian**(ci::solver::MatrixSolver* matrix_solver) override
            - Eigen::VectorXd **matrixVectorProduct**() override
            - Eigen::VectorXd **calculateDiagonal**() override
        == constructors ==
            **FCI**(const libwint::SOBasis& so_basis, size_t N_alpha, size_t N_beta)
        == destructor ==
            **~FCI**()
        __ public methods __
            + {static} **calculateDimension**(size_t K, size_t N_alpha, size_t N_beta)
            + void **calculate1RDMs**() override
            + void **calculate2RDMs**() override
    }
}


@enduml
