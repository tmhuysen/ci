@startuml

namespace doci {
    abstract class CI {
        __ protected members __
            # size_t nelec
            # size_t K
            # size_t nbf
            # doci::State lowestEigenState
            # doci::CI_basis* basis
            # doci::Hamiltonian* hamiltonian
        __ protected methods __
            # virtual void **calculateCI**(size_t start, size_t end)=0
	        # virtual void **construct**()=0
        == constructors ==
	        **CI**()
	        **CI**(CI_basis *ciBasis)
	    __ public methods __
	        + Hamiltonian* **getHamiltonian**() const
    }


    class DOCI {
        __ private members __
            - size_t npairs
            - bmqc::AddressingScheme ad_mat
        __ private methods __
            - void **calculateCI**(size_t start, size_t end) override
            - void **construct**() override
        == constructors ==
            **DOCI**(CI_basis *ciBasis)
    }


    class FCI {
        __ private members __
            - size_t nelec_a
            - size_t nelec_b
            - size_t nbf_a
            - size_t nbf_b
            - bmqc::AddressingScheme ad_mat_a
            - bmqc::AddressingScheme ad_mat_b
        __ private methods __
            - void **calculateCI**(size_t start, size_t end) override
            - void **construct**() override
        == constructors ==
            **FCI**(CI_basis *ciBasis)
    }


    class State {
        __ private members __
            - double eval
            - Eigen::VectorXd evec
        == constructors ==
            **State**()
            **State**(double eval, Eigen::VectorXd evec)
        __ public methods __
            + double **getEval**()
            + const Eigen::VectorXd& **getEvec**() const

            + bool **operator<**(const doci::State& rhs)
            + bool **operator>**(const doci::State& rhs)
            + bool **operator==**(const doci::State& rhs)
    }


    class CI_basis {
        __ private members __
            - Eigen::MatrixXd one_ints
            - Eigen::Tensor<double, 4> two_ints
            - double internuclear_repulsion
            - size_t K
            - size_t nelec
        == constructors ==
            **CI_basis**()
            **CI_basis**(hf::rhf::RHF& rhf)
            **CI_basis**(const std::string& filename)
        __ public methods __
            + void **rotate**(double rot, size_t index1, size_t index2)
            + double **getOne_int**(size_t index1, size_t index2) const
            + double **getTwo_int**(size_t index1, size_t index2, size_t index3, size_t index4) const
            + double **getInternuclear_repulsion**() const
            + size_t **getK**() const
            + size_t **getNelec**() const
    }


    abstract class Hamiltonian {
        __ protected members __
            # size_t nbf
            # Eigen::VectorXd eigenvalues
            # Eigen::MatrixXd eigenvectors
            # std::vector<doci::State> groundstates= { doci::State (std::numeric_limits<double>::max(), Eigen::VectorXd()) }
        __ protected methods __
            # void **groundStates**(doci::State state)
        __ public methods __
            + const std::vector<doci::State>& **getGroundstates**() const
            + virtual void **add**(double value, size_t index1, size_t index2)=0
            + virtual void **solve**()=0
            + {static} Hamiltonian* **make_hamiltonian**(size_t nbf);
    }


    class DenseHamiltonian {
        __ private members __
            - Eigen::MatrixXd hamiltonian
        == constructors ==
            **DenseHamiltonian**(size_t nbf)
        __ public methods __
            + const Eigen::MatrixXd& **getHamiltonian**() const

            + void **solve**() override
            + void **add**(double value, size_t index1, size_t index2) override
    }
}


namespace bmqc {
    class AddressingScheme {
        == constructors ==
            AddressingScheme(size_t K, size_t N)
        __ public methods __
            + const Matrixi& get_vertex_weights() const
            + size_t fetchAddress(const boost::dynamic_bitset<> bitVector)
            + boost::dynamic_bitset<> **generateBitVector_bitset**(size_t address)
    }

    class global {
        .. bitset ..
            void next_bitset_permutation(boost::dynamic_bitset<>& v)
        .. bitset_s ..
            void annihilation_s(bf_base_a, a, sign)
            void creation_s(bf_base_a, b, sign)
    }


}

namespace libwint {
    class global {
        Eigen::MatrixXd **transform_AO_to_SO**(Eigen::MatrixXd& f_AO, Eigen::MatrixXd& C)
    }
}

namespace hf {
    namespace rhf {
        class RHF {
            __ public data __
                + libwint::Basis &basis
        }
    }
}


doci.CI_basis ..> libwint.global
doci.CI_basis o--> hf.rhf.RHF

doci.Hamiltonian o--> doci.State

doci.DenseHamiltonian --|> doci.Hamiltonian

doci.CI *--> doci.State
doci.CI o--> doci.CI_basis
doci.CI *--> doci.Hamiltonian

doci.DOCI --|> doci.CI
doci.DOCI *--> bmqc.AddressingScheme
doci.DOCI ..> bmqc.global

doci.FCI --|> doci.CI
doci.FCI ..> bmqc.global
doci.FCI *--> "2" bmqc.AddressingScheme

@enduml